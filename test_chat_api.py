
#!/usr/bin/env python3

import asyncio
import websockets
import json
import base64
import sys

async def test_chat():
    uri = "ws://localhost:5000/ws/"

    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É —Å AI")

            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_messages = [
                {"message": "–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–æ–∫?", "image_data": None},
                {"message": "–ß—Ç–æ —Ç–∞–∫–æ–µ BSOD?", "image_data": None},
                {"message": "–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å kernel panic –≤ Linux?", "image_data": None},
                {"message": "–ø–æ–º–æ—â—å", "image_data": None},
            ]

            for msg in test_messages:
                print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {msg['message']}")
                await websocket.send(json.dumps(msg))

                response = await websocket.recv()
                data = json.loads(response)

                print(f"ü§ñ –û—Ç–≤–µ—Ç: {data['response']}")

                if data.get('analysis'):
                    analysis = data['analysis']
                    print(f"   üìä –ê–Ω–∞–ª–∏–∑: {analysis['error_type']} ({analysis['os_type']})")
                    print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.2%}")

                if data.get('suggestions'):
                    print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(data['suggestions'])} –ø—É–Ω–∫—Ç–æ–≤")

                await asyncio.sleep(1)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: cargo run server")

def test_image_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ base64"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1x1 –ø–∏–∫—Å–µ–ª—å
        import io
        from PIL import Image

        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (100, 100), color='blue')
        buffer = io.BytesIO()
        img.save(buffer, format='PNG')
        img_data = buffer.getvalue()

        # –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ base64
        img_base64 = base64.b64encode(img_data).decode('utf-8')

        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (—Ä–∞–∑–º–µ—Ä: {len(img_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return img_base64

    except ImportError:
        print("‚ùå –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow: pip install Pillow")
        return None

async def test_image_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    img_data = test_image_upload()
    if not img_data:
        return

    uri = "ws://localhost:5000/ws/"

    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

            message = {
                "message": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏",
                "image_data": img_data
            }

            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            await websocket.send(json.dumps(message))

            response = await websocket.recv()
            data = json.loads(response)

            print(f"ü§ñ –û—Ç–≤–µ—Ç: {data['response']}")

            if data.get('analysis'):
                analysis = data['analysis']
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {analysis['error_type']}")
                print(f"   –û–°: {analysis['os_type']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.2%}")
                print(f"   –†–µ—à–µ–Ω–∏—è: {len(analysis['solutions'])}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º")
    print("="*50)

    if len(sys.argv) > 1 and sys.argv[1] == "image":
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        asyncio.run(test_image_analysis())
    else:
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞...")
        asyncio.run(test_chat())

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: python3 test_chat_api.py image")
